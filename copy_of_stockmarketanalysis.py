# -*- coding: utf-8 -*-
"""Copy of stockMarketAnalysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/144Qnb1dJGOtNYJ3V-7Dy8MMfBc2FHG-h

**NIFTY 50 Index stock analysis**
"""

from google.colab import drive
drive.mount ('/content/drive')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go

project_directory = '/content/drive/MyDrive/Learnings/PYTHON-DEMO/Stockmarket/'

nifty50EicherMotors = pd.read_csv(project_directory+'/EICHERMOT.csv')
nifty50Reliance = pd.read_csv(project_directory+'/RELIANCE.csv')
nifty50AdaniPorts = pd.read_csv(project_directory+'/ADANIPORTS.csv')
nifty50BharatiAirtel = pd.read_csv(project_directory+'/BHARTIARTL.csv')
nifty50BajajAuto = pd.read_csv(project_directory+'/BAJAJ-AUTO.csv')
nifty50Titan = pd.read_csv(project_directory+'/TITAN.csv')

stockList = ['RELIANCE.csv','BHARTIARTL.csv', 'ADANIPORTS.csv'] #all stocks in list
stockMarket = pd.DataFrame() # Create all stocks data frame 
for stocks in stockList:
    files = pd.read_csv(project_directory+'/'+stocks) #iterate all stocks one by one
    stockMarket = pd.concat([stockMarket,files]) #concat the list with help of concat method
stockMarket.head()

"""**Removing null values**"""

stockMarket.isna().sum()

stockMarket.drop(['Trades','Deliverable Volume','%Deliverble'],axis=1,inplace=True)

stockMarket.head()

"""**Converting the Date column in the DataFrame stockMarket into datetime format**

"""

stockMarket.dtypes

stockMarket['Date'] = pd.to_datetime(stockMarket['Date'])

stockMarket.dtypes

"""**Calculating Return of Investments of three nifty 50 stocks from 2020 to 2021**"""

# Set the start and end date
start_date = '2020-01-01'
end_date = '2021-12-31'

# Create a list of unique stocks in the stockList
unique_stocks = list(set([stock[:-4] for stock in stockList]))

# Create a dictionary to store the ROI for each stock
roi_dict = {}

# Calculate ROI for each stock and store in the dictionary
for stock in unique_stocks:
    data = stockMarket[stockMarket['Symbol'] == stock]
    data = data[(data['Date'] >= start_date) & (data['Date'] <= end_date)]
    initial_price = data['Close'].iloc[0]
    final_price = data['Close'].iloc[-1]
    roi = (final_price - initial_price) / initial_price * 100
    roi_dict[stock] = roi
    
print(roi_dict)

# Plot the ROI for each stock
plt.bar(roi_dict.keys(), roi_dict.values())
plt.xticks(rotation=45)
plt.title('Return of Investment for Stocks')
plt.xlabel('Nifty 50 Stocks')
plt.ylabel('ROI (%)')
plt.show()

stockList

"""**Volume trades of 3 largest Nifty stocks**"""

stockMarket2 = stockMarket.copy()
stockMarket2.info()

# Renaming the Date column in the dataFrame stockMarket2 to Year
stockMarket2.rename(columns={'Date':'Year'},inplace=True)

stockMarket2.info()

stockList2 = stockMarket2['Symbol'].unique()
stockList2

for volume in stockList2:
    df = stockMarket2[stockMarket2['Symbol']==volume]
    fig = px.line(df, x='Year',y='Volume',title=volume)
    fig.show()

"""**Open, High, Low and Close Price of three stocks of Nifty 50**"""

nifty50Reliance['Date'] = pd.to_datetime(nifty50Reliance['Date'])
nifty50EicherMotors['Date'] = pd.to_datetime(nifty50EicherMotors['Date'])
nifty50Titan['Date'] = pd.to_datetime(nifty50Titan['Date'])

df1 = nifty50BajajAuto
fig = go.Figure(data=[go.Candlestick(x=df1['Date'],
                                    open=df1['Open'],
                                    high=df1['High'],
                                    low=df1['Low'],
                                    close=df1['Close'],)])
fig.update_xaxes(rangeslider_visible=False)
fig.update_layout(title="Candlestick Chart of Open, High, Low and Close Price for Nifty50 Bajaj Auto stock")

df2 = nifty50BharatiAirtel
fig = go.Figure(data=[go.Candlestick(x=df2['Date'],
                                    open=df2['Open'],
                                    high=df2['High'],
                                    low=df2['Low'],
                                    close=df2['Close'],)])
fig.update_xaxes(rangeslider_visible=False)
fig.update_layout(title="Candlestick Chart of Open, High, Low and Close Price for Nifty50 Bharati Airtel Auto stock")

df3 = nifty50AdaniPorts
fig = go.Figure(data=[go.Candlestick(x=df3['Date'],
                                    open=df3['Open'],
                                    high=df3['High'],
                                    low=df3['Low'],
                                    close=df3['Close'],)])
fig.update_xaxes(rangeslider_visible=False)
fig.update_layout(title="Candlestick Chart of Open, High, Low and Close Price for Nifty50 Adani ports stock")

"""**Delivery volume and Intra day volumes trades in three Nifty stocks**

"""

# Define colors for the pie charts
colors = ['#ff9999','#66b3ff','#99ff99','#ffcc99']

# Define pie chart variables and values for each stock
piechart_vars = ['Deliverable Volume','Volume']
piechart_values1 = [df1['Deliverable Volume'].sum(), df1['Volume'].sum()]
piechart_values2 = [df2['Deliverable Volume'].sum(), df2['Volume'].sum()]
piechart_values3 = [df3['Deliverable Volume'].sum(), df3['Volume'].sum()]

# Create subplots with 1 row and 3 columns
fig, axs = plt.subplots(1, 3, figsize=(10, 5))

# Plot the first pie chart in the first subplot
axs[0].pie(piechart_values1, labels=piechart_vars, autopct="%1.2f%%", colors=colors)
axs[0].set_title('Volume in Bajaj Auto stock')

# Plot the second pie chart in the second subplot
axs[1].pie(piechart_values2, labels=piechart_vars, autopct="%1.2f%%", colors=colors)
axs[1].set_title('Volume in Bharati Airtel stock')

# Plot the third pie chart in the third subplot
axs[2].pie(piechart_values3, labels=piechart_vars, autopct="%1.2f%%", colors=colors)
axs[2].set_title('Volume in Adani ports stock')

# Adjust spacing between subplots
plt.subplots_adjust(wspace=0.7)

# Show the plot
plt.show()

"""Ten High prices of three Nifty 50 stocks"""

high_10_price_df1 = df1.sort_values(by='High', ascending=False).head(10)
high_10_price_df2 = df2.sort_values(by='High', ascending=False).head(10)
high_10_price_df3 = df3.sort_values(by='High', ascending=False).head(10)

fig, axs = plt.subplots(nrows=1, ncols=3, figsize=(32, 7))

axs[0].plot(high_10_price_df1.Date, high_10_price_df1.Low,'o-b')
axs[0].set_xlabel('Dates', size=25)
axs[0].set_ylabel('Price in INR', size=25)
axs[0].set_title('10 Highest price of BAJAJ AUTO Stock', size=25)

axs[1].plot(high_10_price_df2.Date, high_10_price_df2.Low,'o-b')
axs[1].set_xlabel('Dates', size=25)
axs[1].set_ylabel('Price in INR', size=25)
axs[1].set_title('10 Highest price of Bharati Airtel Stock', size=25)

axs[2].plot(high_10_price_df3.Date, high_10_price_df3.Low,'o-b')
axs[2].set_xlabel('Dates', size=25)
axs[2].set_ylabel('Price in INR', size=25)
axs[2].set_title('10 Highest price of ADANI Stock', size=25)

plt.tight_layout()
plt.show()

"""**Ten Low prices of three Nifty 50 stocks**"""

low_10_price_df1 = df1.sort_values(by='Low', ascending=True).head(10)
low_10_price_df2 = df2.sort_values(by='Low', ascending=True).head(10)
low_10_price_df3 = df3.sort_values(by='Low', ascending=True).head(10)

fig, axs = plt.subplots(nrows=1, ncols=3, figsize=(32, 7))

axs[0].plot(low_10_price_df1.Date, low_10_price_df1.Low,'o-b')
axs[0].set_xlabel('Dates', size=25)
axs[0].set_ylabel('Price in INR', size=25)
axs[0].set_title('10 Lowest price of BAJAJ AUTO Stock', size=25)

axs[1].plot(low_10_price_df2.Date, low_10_price_df2.Low,'o-b')
axs[1].set_xlabel('Dates', size=25)
axs[1].set_ylabel('Price in INR', size=25)
axs[1].set_title('10 Lowest price of Bharati Airtel Stock', size=25)

axs[2].plot(low_10_price_df3.Date, low_10_price_df3.Low,'o-b')
axs[2].set_xlabel('Dates', size=25)
axs[2].set_ylabel('Price in INR', size=25)
axs[2].set_title('10 Lowest price of ADANI Stock', size=25)

plt.tight_layout()
plt.show()